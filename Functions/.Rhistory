library(readxl)
library(openxlsx)
library(tidyverse)
library(xlsx)
library(openxlsx)
# Set common base path
base_path <- "C:/Users/ccris/Dropbox (University of Michigan)/carlos/Work/Nhats/SkipNHATS/"
# Read data from Excel files
fullList <- read_excel(paste0(base_path, "datasets/SkipDataset/NHATSNationalStudyRound1SpecWriterExchange.xlsx"), sheet = "Item")
# Load required libraries
library(readr)
library(dplyr)
library(openxlsx)
library(readxl)
library(openxlsx)
library(tidyverse)
library(xlsx)
library(openxlsx)
# Set common base path
base_path <- "C:/Users/ccris/Dropbox (University of Michigan)/carlos/Work/Nhats/SkipNHATS/"
# Read data from Excel files
fullList <- read_excel(paste0(base_path, "datasets/SkipDataset/NHATSNationalStudyRound1SpecWriterExchange.xlsx"), sheet = "Item")
# Extract relevant columns from 'fullList'
complete <- fullList %>%
select("tblItem-Category_Id", "tblItem-ItemTag", "tblItem-Numb",
"tblQuestion-FieldRefusedSkiptoID", "tblQuestion-FieldDKSkiptoID",
"tblQuestionText-QuestionText - EN", "tblQuestionText-QuestionText - ES") %>%
rename(fldSectionID = `tblItem-Category_Id`,
fldItemID = `tblItem-ItemTag`)
# Filter and join relevant data from 'complete', 'Part2', and 'trueNames'
items <- complete %>%
#filter(fldSectionID != "IS") %>%
left_join(Part2) %>%
filter(fldSectionID == "CG") %>%
left_join(trueNames %>%
rename(fldItemID = `Questionnaire ITEM`) %>%
distinct()) %>%
select(-c("tblQuestion-FieldRefusedSkiptoID", "tblQuestion-FieldDKSkiptoID"))
# Inapplicable part
itemsHC <- items %>%
rename(`Questionnaire ITEM` = fldItemID,
id = `tblItem-Numb`) %>%
arrange(id) %>%
filter(str_detect(`Questionnaire ITEM`, "CG")) %>%
#filter(`Questionnaire ITEM` != "HC3") %>%
select(c("Questionnaire ITEM", "id", "fldResponseID", "fldSkipTo", "Variable name"))
# Extract unique patterns and positions
pattern <- unique(itemsHC$fldSkipTo)
positions <- sapply(pattern, function(pat) {
which(itemsHC$`Questionnaire ITEM` == pat)[1]
})
# Create data frames for patterns and positions
paste_df <- data.frame(cbind(pattern, position = as.numeric(positions)))[-1,]
paste2_df <- itemsHC %>%
filter(!is.na(fldSkipTo)) %>%
distinct(`Questionnaire ITEM`, fldSkipTo) %>%
group_by(fldSkipTo) %>%
mutate(del = seq(n())) %>%
filter(del == 1) %>%
ungroup() %>%
select(-del) %>%
rename(patt = `Questionnaire ITEM`) %>%
rename(`Questionnaire ITEM` = fldSkipTo) %>%
right_join(itemsHC) %>%
arrange(id) %>%
group_by(patt) %>%
mutate(countpat = seq_along(patt)) %>%
ungroup() %>%
mutate(pattdel = case_when(is.na(patt) ~ 0,
!is.na(patt) & countpat == 1 ~ 1,
!is.na(patt) & countpat != 1 ~ 0)) %>%
mutate(patt = ifelse(pattdel == 1, patt, NA)) %>%
select(-pattdel) %>%
mutate(patt = lead(patt)) %>%
mutate(patt2 = ifelse(!is.na(fldSkipTo), `Questionnaire ITEM`, patt)) %>%
#mutate(patt2 = ifelse(grepl("HC", patt2), patt2, NA)) %>%
mutate(crossed_column = ifelse(!is.na(patt), as.character(patt), as.character(patt2))) %>%
select(-c(patt, patt2))
# Merge data frames for IDs
idMerge <- paste2_df %>%
distinct(`Questionnaire ITEM`, id) %>%
rename(id2 = id,
crossed_column = `Questionnaire ITEM`)
# Merge data frames for final results
fin2 <- paste2_df %>%
left_join(idMerge)
# Process the grouped positions
df <- data.frame(position = seq_along(fin2$id2), value = fin2$id2)
df_filtered <- df %>%
filter(!is.na(value))
# Group the positions by their values
grouped_positions <- df_filtered %>%
group_by(value) %>%
mutate(n = n(),
min = min(position) + 1,
max = max(position) - 1) %>%
ungroup() %>%
filter(n != 1) %>%
distinct(value, min, max)
grouped_positions2 <- df_filtered %>%
group_by(value) %>%
mutate(n = n(),
min = min(position) + 1,
max = max(position) - 1) %>%
ungroup() %>%
mutate(id3 = lead(max)) %>%
select(-max) %>%
rename(max = id3) %>%
filter(n == 1) %>%
distinct(value, n, min, max)
# Fill in values for grouped_positions and grouped_positions2
id1 <- rep(NA, nrow(fin2))
for (i in 1:nrow(grouped_positions)) {
id1[grouped_positions$min[i]:grouped_positions$max[i]] <- grouped_positions$value[i]
}
fin3 <- cbind(fin2, id1)
id2 <- rep(NA, nrow(fin3))
for (i in 1:nrow(grouped_positions2)) {
id2[grouped_positions2$min[i]:grouped_positions2$max[i]] <- grouped_positions2$value[i]
}
fin4 <- data.frame(cbind(fin3, id2))
# Create 'text' column
fin4$text <- paste(fin4$Questionnaire.ITEM, fin4$fldResponseID, sep = "=")
# Merge data frames for final results
list2 <- fin4 %>%
ungroup() %>%
distinct(id, text)
final2 <- fin4 %>%
left_join(list2 %>%
rename(id1 = id)) %>%
left_join(list2 %>%
rename(id2.1 = id, text2 = text)) %>%
ungroup() %>%
group_by(Questionnaire.ITEM) %>%
mutate(k = ifelse(all(is.na(fldSkipTo)), 0, 1)) %>%
mutate(fil = as.numeric(sub(".*=(\\d+)", "\\1", text2))) %>%
mutate(text2 = ifelse(k == 1 & fil == 1 & fldResponseID == 2, NA, text2)) %>%
mutate(patternskip = case_when(is.na(text) & is.na(text2) ~ NA,
!is.na(text) & is.na(text2) ~ text,
!is.na(text) & !is.na(text2) ~ paste(text, text2, sep = ",")))
# Filter skip data
skipdata <- fin4 %>%
filter(!is.na(fldSkipTo)) %>%
distinct(Questionnaire.ITEM, id, fldResponseID, fldSkipTo, Variable.name) %>%
mutate(item1 = paste(Questionnaire.ITEM, fldResponseID, sep = "=")) %>%
distinct(id, item1, Variable.name)
# Merge data frames for final results
final <- fin4 %>%
left_join(list2 %>%
rename(id1 = id)) %>%
group_by(id2) %>%
mutate(id3 = seq(n())) %>%
mutate(merge = ifelse(row_number() == which.max(id3) & id3 > 1, 1, 0)) %>%
mutate(iditem1 = ifelse(merge == 1, id2, id1)) %>%
left_join(skipdata %>%
rename(iditem1 = id,
name1 = Variable.name)) %>%
ungroup() %>%
mutate(iditem2 = lag(id2.1)) %>%
left_join(skipdata %>%
rename(iditem2 = id,
item2 = item1,
name2 = Variable.name)) %>%
select(-c(crossed_column, id1, id2, id2.1, text, id3, merge)) %>%
mutate(pattern = ifelse(!is.na(item2), paste(item1, item2, sep = ","), item1)) %>%
left_join(fin4 %>%
distinct(Questionnaire.ITEM, Variable.name) %>%
rename(nameSkip = Variable.name,
fldSkipTo = Questionnaire.ITEM)) %>%
select("Questionnaire.ITEM", "Variable.name", "id", "fldResponseID", "fldSkipTo",
"nameSkip", "countpat", "item1", "name1", "item2", "name2", "pattern")
# Create the 'FinalPresent' data frame
FinalPresent <- final %>%
select(-c(id, countpat,name1)) %>%
distinct() %>%
left_join(items %>%
select(-c(`Variable name`,`Variable label`)) %>%
rename(Questionnaire.ITEM = fldItemID)) %>%
select(-fldResponseID, ) %>%
distinct()
View(FinalPresent)
load("C:/Users/ccris/Dropbox (University of Michigan)/carlos/Academy/university/Semester IV/721 thesis/combined_data.RData")
library(dplyr)
library(haven)
library(tidyverse)
library(gridExtra)
library(geepack)
library(svglite)
dataModel = read.csv(file = "C:/Users/ccris/Dropbox (University of Michigan)/carlos/Academy/university/Semester IV/721 thesis/dataModel.csv")
mod2q1 = geeglm(
Q1 ~ factor(gender)  +
age  +
factor(race),
id = spid,
waves = year,
family = binomial("logit"),
data = dataModel,
corstr = 'exchangeable' #change across
)
summary(mod2q1)
mod2q1 = geeglm(
Q1 ~
age  +
factor(race),
id = spid,
waves = year,
family = binomial("logit"),
data = dataModel,
corstr = 'exchangeable' #change across
)
summary(mod2q1)
# Load required libraries
library(readr)
library(dplyr)
library(openxlsx)
library(readxl)
library(openxlsx)
library(tidyverse)
library(xlsx)
# Set common base path
base_path <- "C:/Users/ccris/Dropbox (University of Michigan)/carlos/Work/Nhats/SkipNHATS/"
# Read data from Excel files
fullList <- read_excel(paste0(base_path, "datasets/SkipDataset/NHATSNationalStudyRound1SpecWriterExchange.xlsx"), sheet = "Item")
# Extract relevant columns from 'fullList'
complete <- fullList %>%
select("tblItem-Category_Id", "tblItem-ItemTag", "tblItem-Numb",
"tblQuestion-FieldRefusedSkiptoID", "tblQuestion-FieldDKSkiptoID",
"tblQuestionText-QuestionText - EN", "tblQuestionText-QuestionText - ES") %>%
rename(fldSectionID = `tblItem-Category_Id`,
fldItemID = `tblItem-ItemTag`)
# Filter and join relevant data from 'complete', 'Part2', and 'trueNames'
items <- complete %>%
#filter(fldSectionID != "IS") %>%
left_join(Part2) %>%
filter(fldSectionID == "SC") %>%
left_join(trueNames %>%
rename(fldItemID = `Questionnaire ITEM`) %>%
distinct()) %>%
select(-c("tblQuestion-FieldRefusedSkiptoID", "tblQuestion-FieldDKSkiptoID"))
# Inapplicable part
itemsHC <- items %>%
rename(`Questionnaire ITEM` = fldItemID,
id = `tblItem-Numb`) %>%
arrange(id) %>%
filter(str_detect(`Questionnaire ITEM`, "SC")) %>%
#filter(`Questionnaire ITEM` != "HC3") %>%
select(c("Questionnaire ITEM", "id", "fldResponseID", "fldSkipTo", "Variable name"))
# Extract unique patterns and positions
pattern <- unique(itemsHC$fldSkipTo)
positions <- sapply(pattern, function(pat) {
which(itemsHC$`Questionnaire ITEM` == pat)[1]
})
# Create data frames for patterns and positions
paste_df <- data.frame(cbind(pattern, position = as.numeric(positions)))[-1,]
paste2_df <- itemsHC %>%
filter(!is.na(fldSkipTo)) %>%
distinct(`Questionnaire ITEM`, fldSkipTo) %>%
group_by(fldSkipTo) %>%
mutate(del = seq(n())) %>%
filter(del == 1) %>%
ungroup() %>%
select(-del) %>%
rename(patt = `Questionnaire ITEM`) %>%
rename(`Questionnaire ITEM` = fldSkipTo) %>%
right_join(itemsHC) %>%
arrange(id) %>%
group_by(patt) %>%
mutate(countpat = seq_along(patt)) %>%
ungroup() %>%
mutate(pattdel = case_when(is.na(patt) ~ 0,
!is.na(patt) & countpat == 1 ~ 1,
!is.na(patt) & countpat != 1 ~ 0)) %>%
mutate(patt = ifelse(pattdel == 1, patt, NA)) %>%
select(-pattdel) %>%
mutate(patt = lead(patt)) %>%
mutate(patt2 = ifelse(!is.na(fldSkipTo), `Questionnaire ITEM`, patt)) %>%
#mutate(patt2 = ifelse(grepl("HC", patt2), patt2, NA)) %>%
mutate(crossed_column = ifelse(!is.na(patt), as.character(patt), as.character(patt2))) %>%
select(-c(patt, patt2))
# Merge data frames for IDs
idMerge <- paste2_df %>%
distinct(`Questionnaire ITEM`, id) %>%
rename(id2 = id,
crossed_column = `Questionnaire ITEM`)
# Merge data frames for final results
fin2 <- paste2_df %>%
left_join(idMerge)
# Process the grouped positions
df <- data.frame(position = seq_along(fin2$id2), value = fin2$id2)
df_filtered <- df %>%
filter(!is.na(value))
# Group the positions by their values
grouped_positions <- df_filtered %>%
group_by(value) %>%
mutate(n = n(),
min = min(position) + 1,
max = max(position) - 1) %>%
ungroup() %>%
filter(n != 1) %>%
distinct(value, min, max)
grouped_positions2 <- df_filtered %>%
group_by(value) %>%
mutate(n = n(),
min = min(position) + 1,
max = max(position) - 1) %>%
ungroup() %>%
mutate(id3 = lead(max)) %>%
select(-max) %>%
rename(max = id3) %>%
filter(n == 1) %>%
distinct(value, n, min, max)
# Fill in values for grouped_positions and grouped_positions2
id1 <- rep(NA, nrow(fin2))
for (i in 1:nrow(grouped_positions)) {
id1[grouped_positions$min[i]:grouped_positions$max[i]] <- grouped_positions$value[i]
}
fin3 <- cbind(fin2, id1)
id2 <- rep(NA, nrow(fin3))
for (i in 1:nrow(grouped_positions2)) {
id2[grouped_positions2$min[i]:grouped_positions2$max[i]] <- grouped_positions2$value[i]
}
fin4 <- data.frame(cbind(fin3, id2))
# Create 'text' column
fin4$text <- paste(fin4$Questionnaire.ITEM, fin4$fldResponseID, sep = "=")
# Merge data frames for final results
list2 <- fin4 %>%
ungroup() %>%
distinct(id, text)
final2 <- fin4 %>%
left_join(list2 %>%
rename(id1 = id)) %>%
left_join(list2 %>%
rename(id2.1 = id, text2 = text)) %>%
ungroup() %>%
group_by(Questionnaire.ITEM) %>%
mutate(k = ifelse(all(is.na(fldSkipTo)), 0, 1)) %>%
mutate(fil = as.numeric(sub(".*=(\\d+)", "\\1", text2))) %>%
mutate(text2 = ifelse(k == 1 & fil == 1 & fldResponseID == 2, NA, text2)) %>%
mutate(patternskip = case_when(is.na(text) & is.na(text2) ~ NA,
!is.na(text) & is.na(text2) ~ text,
!is.na(text) & !is.na(text2) ~ paste(text, text2, sep = ",")))
# Filter skip data
skipdata <- fin4 %>%
filter(!is.na(fldSkipTo)) %>%
distinct(Questionnaire.ITEM, id, fldResponseID, fldSkipTo, Variable.name) %>%
mutate(item1 = paste(Questionnaire.ITEM, fldResponseID, sep = "=")) %>%
distinct(id, item1, Variable.name)
# Merge data frames for final results
final <- fin4 %>%
left_join(list2 %>%
rename(id1 = id)) %>%
group_by(id2) %>%
mutate(id3 = seq(n())) %>%
mutate(merge = ifelse(row_number() == which.max(id3) & id3 > 1, 1, 0)) %>%
mutate(iditem1 = ifelse(merge == 1, id2, id1)) %>%
left_join(skipdata %>%
rename(iditem1 = id,
name1 = Variable.name)) %>%
ungroup() %>%
mutate(iditem2 = lag(id2.1)) %>%
left_join(skipdata %>%
rename(iditem2 = id,
item2 = item1,
name2 = Variable.name)) %>%
select(-c(crossed_column, id1, id2, id2.1, text, id3, merge)) %>%
mutate(pattern = ifelse(!is.na(item2), paste(item1, item2, sep = ","), item1)) %>%
left_join(fin4 %>%
distinct(Questionnaire.ITEM, Variable.name) %>%
rename(nameSkip = Variable.name,
fldSkipTo = Questionnaire.ITEM)) %>%
select("Questionnaire.ITEM", "Variable.name", "id", "fldResponseID", "fldSkipTo",
"nameSkip", "countpat", "item1", "name1", "item2", "name2", "pattern")
# Create the 'FinalPresent' data frame
FinalPresent <- final %>%
select(-c(id, countpat,name1)) %>%
distinct() %>%
left_join(items %>%
select(-c(`Variable name`,`Variable label`)) %>%
rename(Questionnaire.ITEM = fldItemID)) %>%
select(-fldResponseID, ) %>%
distinct()
View(FinalPresent)
names(FinalPresent)
# Create the 'FinalPresent' data frame
FinalPresent <- final %>%
select(-c(id, countpat,name1)) %>%
distinct() %>%
left_join(items %>%
select(-c(`Variable name`,`Variable label`)) %>%
rename(Questionnaire.ITEM = fldItemID)) %>%
select(-fldResponseID, ) %>%
distinct("Questionnaire.ITEM","Variable.name","fldSkipTo","nameSkip","item1","item2",
"name2","pattern","fldSectionID","tblItem-Numb" )
# Create the 'FinalPresent' data frame
FinalPresent <- final %>%
select(-c(id, countpat,name1)) %>%
distinct() %>%
left_join(items %>%
select(-c(`Variable name`,`Variable label`)) %>%
rename(Questionnaire.ITEM = fldItemID)) %>%
select(-fldResponseID, ) %>%
distinct(Questionnaire.ITEM,Variable.name,fldSkipTo,nameSkip,item1,item2,
name2,pattern,fldSectionID,"tblItem-Numb" )
# Create the 'FinalPresent' data frame
FinalPresent <- final %>%
select(-c(id, countpat,name1)) %>%
distinct() %>%
left_join(items %>%
select(-c(`Variable name`,`Variable label`)) %>%
rename(Questionnaire.ITEM = fldItemID)) %>%
select(-fldResponseID, ) %>%
distinct(Questionnaire.ITEM,Variable.name,fldSkipTo,nameSkip,item1,item2,
name2,pattern,fldSectionID,`tblItem-Numb` )
FinalPresentHC
View(FinalPresentHC)
#write.xlsx(FinalPresentHC, file = paste0(base_path, "outcomes/BaseWoCleanv04.xlsx"))
library(xlsx)
library(xlsx)
library(openxlsx)
FinalPresentHC <- read.xlsx(paste0(base_path, "outcomes/BaseWoCleanv04.xlsx"))
base_path
paste0(base_path, "outcomes/BaseWoCleanv04.xlsx")
FinalPresentHC <- read.xlsx(paste0(base_path, "outcomes/BaseWoCleanv03.xlsx"))
FinalPresentHC
ItemPF = FinalPresentHC %>%
filter(skipbyResID==1)
ItemPF
ItemPF = FinalPresentHC %>%
filter(skipbyResID==1) %>%
summarise(n())
ItemPF
ItemPF = FinalPresentHC %>%
filter(skipbyResID==1) %>%
summarise(n()) %>%
numeric()
ItemPF
ItemPF = FinalPresentHC %>%
filter(skipbyResID==1) %>%
summarise(ItemPF = n()) %>%
numeric()
ItemPF = FinalPresentHC %>%
filter(skipbyResID==1) %>%
summarise(ItemPF = n()) %>%
numeric()
ItemPF = FinalPresentHC %>%
filter(skipbyResID==1) %>%
summarise(n()) %>%
numeric()
ItemPF = FinalPresentHC %>%
filter(skipbyResID==1) %>%
summarise(n()) %>%
numeric()
ItemPF = FinalPresentHC %>%
filter(skipbyResID==1) %>%
summarise(n()) %>%
numeric()
ItemPF = FinalPresentHC %>%
filter(skipbyResID==1) %>%
summarise(n()) %>%
as.numeric()
ItemPF
Itembyr1dresid = FinalPresentHC %>%
filter(AdditionalSkipByResID ==1 & skipbyResIDPattern ==0)%>%
summarise(n()) %>%
as.numeric()
Itembyr1dresid
ItemRemain = FinalPresentHC %>%
filter(AdditionalSkipByResID ==1 & skipbyResIDPattern ==1 &
skipbyResIDPattern ==1) %>%
summarise(n()) %>%
as.numeric()
ItemRemain
Itembyr1dresidandPrior = FinalPresentHC %>%
filter(AdditionalSkipByResID ==1 & skipbyResIDPattern ==0)%>%
summarise(n()) %>%
as.numeric()
Itembyr1dresidandPrior
Itembyr1dresid = FinalPresentHC %>%
filter(AdditionalSkipByResID ==1 & AdditionalSkipByResID ==0)%>%
summarise(n()) %>%
as.numeric()
Itembyr1dresid
FinalPresentHC
View(FinalPresentHC)
Itembyr1dresid = FinalPresentHC %>%
filter(skipbyResID ==1 & AdditionalSkipByResID ==0)%>%
summarise(n()) %>%
as.numeric()
Itembyr1dresid
ItemPF
Itembyr1dresid
Itembyr1dresidandPrior
ItemRemain
cat("¡Total number of variables available in public file in HC section:", ItemPF, "\n")
cat("¡# skipped only by r1dresid:", Itembyr1dresid, "\n")
cat("¡# skipped by r1dresid and prior variables:", Itembyr1dresidandPrior, "\n")
cat("¡Total number of variables available in public file in HC section:", ItemPF,
"¡# skipped only by r1dresid:", Itembyr1dresid,
"¡# skipped by r1dresid and prior variables:", Itembyr1dresidandPrior,
"¡Remaining other skips:", ItemRemain, "\n")
cat("¡Total number of variables available in public file in HC section:", ItemPF,"\n",
"¡# skipped only by r1dresid:", Itembyr1dresid,
"¡# skipped by r1dresid and prior variables:", Itembyr1dresidandPrior,
"¡Remaining other skips:", ItemRemain, "\n")
cat("¡Total number of variables available in public file in HC section:", ItemPF,"\n",
"skipped only by r1dresid:", Itembyr1dresid,"\n",
"skipped by r1dresid and prior variables:", Itembyr1dresidandPrior,"\n",
"Remaining other skips:", ItemRemain, "\n")
cat("Total number of variables available in public file in HC section:", ItemPF,"\n",
"skipped only by r1dresid:", Itembyr1dresid,"\n",
"skipped by r1dresid and prior variables:", Itembyr1dresidandPrior,"\n",
"Remaining other skips:", ItemRemain, "\n")

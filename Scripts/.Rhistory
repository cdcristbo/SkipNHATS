result_df <- rbind(result_df, getRowsWithNonzeroValues(HC, col))
}, error = function(e) {
cat(paste("Error occurred for HC and column:", col, "\n"))
})
}
col
# Call the function and append the results to the dataframe
result_df <- rbind(result_df, getRowsWithNonzeroValues(HC, col))
result_df
# Call the function and append the results to the dataframe
result_df <- rbind(result_df, getRowsWithNonzeroValues(HC, col))
col
HC
data = HC
col = targetColumn
data
data[[targetColumn]] <- as.numeric(data[[targetColumn]])
targetColumn
data[[targetColumn]]
targetColumn
hc_columns
col
hc_columns
col = "is1dproxyid"
col
targetColumn = "is1dproxyid"
data[[targetColumn]]
!is.numeric(data[[targetColumn]])
data[[targetColumn]] <- as.numeric(data[[targetColumn]])
data[[targetColumn]]
# Identify the column name ending with "dresid"
dresid_column <- grep("dresid$", names(data), value = TRUE)
dresid_column
# Create a new dataframe with renamed column
data2 = data %>%
rename(r = dresid_column[1])
data2
# Create the contingency table
contingency_table <- table(data2$r, data2[[targetColumn]])
contingency_table
# Convert the contingency table into a matrix
contingency_matrix <- as.matrix(contingency_table)
# Get the row indices where '-1' has values different from zero
rows_with_nonzero <- which(contingency_matrix[, "-1"] != 0)
rows_string <- paste(rows_with_nonzero, collapse = ", ")
# Create the contingency table
contingency_table <- table(data2$r, data2[[targetColumn]])
contingency_table
# Convert the contingency table into a matrix
contingency_matrix <- as.matrix(contingency_table)
contingency_matrix
# Get the row indices where '-1' has values different from zero
rows_with_nonzero <- which(contingency_matrix[, "-1"] != 0)
# Get the row indices where '-1' has values different from zero
rows_with_nonzero <- which(contingency_matrix[, "-1"] != 0)
contingency_matrix
data2[[targetColumn]]
targetColumn
# Load necessary libraries
library(dplyr)  # For data manipulation
library(haven)  # For reading data files
library(tidyr)  # For data tidying
library(readxl)  # For reading Excel files
library(sas7bdat)  # For reading SAS files
library(stringr)  # For string manipulation
# Specify the path to your Excel file
base_path <- "C:/Users/ccris/Dropbox (University of Michigan)/carlos/Work/Nhats/SkipNHATS/"
# Specify the path to your Excel file
base_path <- "C:/Users/ccris/Dropbox (University of Michigan)/carlos/Work/Nhats/SkipNHATS/"
# Read and clean the Crosswalk data
Crosswalk <- read_excel(paste0(base_path, "datasets/SkipDataset/NHATS_R1_Crosswalk_between_Instruments_and_Codebook_0.xlsx")) %>%
distinct(`Questionnaire ITEM`, `Variable name`)
View(Crosswalk)
# Load necessary libraries
library(dplyr)  # For data manipulation
library(haven)  # For reading data files
library(tidyr)  # For data tidying
library(readxl)  # For reading Excel files
library(sas7bdat)  # For reading SAS files
library(stringr)  # For string manipulation
# Specify the path to your Excel file
base_path <- "C:/Users/ccris/Dropbox (University of Michigan)/carlos/Work/Nhats/SkipNHATS/"
# Read and clean the Crosswalk data
Crosswalk <- read_excel(paste0(base_path, "datasets/SkipDataset/NHATS_R1_Crosswalk_between_Instruments_and_Codebook_0.xlsx")) %>%
distinct(`Questionnaire ITEM`, `Variable name`)
# Set the path to the R script
getRowsWithNonzeroValues <- paste0(base_path, "Functions/getRowsWithNonzeroValues.R")
# Set the folder path
folder_path <- paste0(base_path, "datasets/SP")
file_listSen = paste0(base_path,"datasets/sensitiveSP/r1/NHATS_Round_1_SP_Sen_Dem_File.sas7bdat")
# Load the R script containing the getRowsWithNonzeroValues function
source(getRowsWithNonzeroValues)
# Get a list of all .dta files in the folder
file_list <- list.files(path = folder_path, pattern = ".dta", full.names = TRUE)
file_list <- file_list[1]  # Select the first file only
# Create an empty dataframe to store the results
result_df <- data.frame(variable = character(0), round1Inaplicable = character(0))
# Iterate through each dataset file
for (file in file_list) {
# Read the dataset
data <- read_dta(file)
# Read the sensitive data
dataSen <- read.sas7bdat(file_listSen)
# Merge the dataset with the sensitive data
data <- data %>%
left_join(dataSen)
# Extract relevant columns from the dataset
HCAll <- data %>%
select(spid, ends_with("dresid"), starts_with("is"))
# Extract column names with the pattern "^r\\d+dresid$"
resid_columns <- names(HCAll)[grepl("^r\\d+dresid$", names(HCAll))]
# Find the column with the maximum value
max_value_column <- resid_columns[which.max(sapply(HCAll[resid_columns], max))]
# Select relevant columns from the dataset (HC)
HC <- HCAll %>%
select(spid, max_value_column, starts_with("is"))
# Get the names of the columns starting with "hc"
hc_columns <- grep("^is", names(HC), value = TRUE)
# Iterate through each hc_column
for (col in hc_columns) {
tryCatch({
# Call the function and append the results to the dataframe
result_df <- rbind(result_df, getRowsWithNonzeroValues(HC, col))
}, error = function(e) {
cat(paste("Error occurred for HC and column:", col, "\n"))
})
}
}
# Read the dataset
data <- read_dta(file)
# Read the sensitive data
dataSen <- read.sas7bdat(file_listSen)
# Merge the dataset with the sensitive data
data <- data %>%
left_join(dataSen)
# Extract relevant columns from the dataset
HCAll <- data %>%
select(spid, ends_with("dresid"), starts_with("is"))
# Extract column names with the pattern "^r\\d+dresid$"
resid_columns <- names(HCAll)[grepl("^r\\d+dresid$", names(HCAll))]
# Find the column with the maximum value
max_value_column <- resid_columns[which.max(sapply(HCAll[resid_columns], max))]
# Select relevant columns from the dataset (HC)
HC <- HCAll %>%
select(spid, max_value_column, starts_with("is"))
# Get the names of the columns starting with "hc"
hc_columns <- grep("^is", names(HC), value = TRUE)
hc_columns
# Merge the dataset with the sensitive data
data <- data %>%
left_join(dataSen) %>%
select(-is1dproxyid)
# Read the dataset
data <- read_dta(file)
# Read the sensitive data
dataSen <- read.sas7bdat(file_listSen)
# Merge the dataset with the sensitive data
data <- data %>%
left_join(dataSen) %>%
select(-is1dproxyid)
# Extract relevant columns from the dataset
HCAll <- data %>%
select(spid, ends_with("dresid"), starts_with("is"))
# Extract column names with the pattern "^r\\d+dresid$"
resid_columns <- names(HCAll)[grepl("^r\\d+dresid$", names(HCAll))]
# Find the column with the maximum value
max_value_column <- resid_columns[which.max(sapply(HCAll[resid_columns], max))]
# Select relevant columns from the dataset (HC)
HC <- HCAll %>%
select(spid, max_value_column, starts_with("is"))
# Get the names of the columns starting with "hc"
hc_columns <- grep("^is", names(HC), value = TRUE)
hc_columns
# Iterate through each hc_column
for (col in hc_columns) {
tryCatch({
# Call the function and append the results to the dataframe
result_df <- rbind(result_df, getRowsWithNonzeroValues(HC, col))
}, error = function(e) {
cat(paste("Error occurred for HC and column:", col, "\n"))
})
}
# Specify the path to your Excel file
base_path <- "C:/Users/ccris/Dropbox (University of Michigan)/carlos/Work/Nhats/SkipNHATS/"
# Read and clean the Crosswalk data
Crosswalk <- read_excel(paste0(base_path, "datasets/SkipDataset/NHATS_R1_Crosswalk_between_Instruments_and_Codebook_0.xlsx")) %>%
distinct(`Questionnaire ITEM`, `Variable name`)
# Set the path to the R script
getRowsWithNonzeroValues <- paste0(base_path, "Functions/getRowsWithNonzeroValues.R")
# Set the folder path
folder_path <- paste0(base_path, "datasets/SP")
file_listSen = paste0(base_path,"datasets/sensitiveSP/r1/NHATS_Round_1_SP_Sen_Dem_File.sas7bdat")
# Load the R script containing the getRowsWithNonzeroValues function
source(getRowsWithNonzeroValues)
# Get a list of all .dta files in the folder
file_list <- list.files(path = folder_path, pattern = ".dta", full.names = TRUE)
file_list <- file_list[1]  # Select the first file only
# Create an empty dataframe to store the results
result_df <- data.frame(variable = character(0), round1Inaplicable = character(0))
# Iterate through each dataset file
for (file in file_list) {
# Read the dataset
data <- read_dta(file)
# Read the sensitive data
dataSen <- read.sas7bdat(file_listSen)
# Merge the dataset with the sensitive data
data <- data %>%
left_join(dataSen) %>%
select(-is1dproxyid)
# Extract relevant columns from the dataset
HCAll <- data %>%
select(spid, ends_with("dresid"), starts_with("is"))
# Extract column names with the pattern "^r\\d+dresid$"
resid_columns <- names(HCAll)[grepl("^r\\d+dresid$", names(HCAll))]
# Find the column with the maximum value
max_value_column <- resid_columns[which.max(sapply(HCAll[resid_columns], max))]
# Select relevant columns from the dataset (HC)
HC <- HCAll %>%
select(spid, max_value_column, starts_with("is"))
# Get the names of the columns starting with "hc"
hc_columns <- grep("^is", names(HC), value = TRUE)
# Iterate through each hc_column
for (col in hc_columns) {
tryCatch({
# Call the function and append the results to the dataframe
result_df <- rbind(result_df, getRowsWithNonzeroValues(HC, col))
}, error = function(e) {
cat(paste("Error occurred for HC and column:", col, "\n"))
})
}
}
# Process and clean the result dataframe
result_df <- result_df %>%  # Assign the modified dataframe back to result_df
select(-c(re, OtherSkip)) %>%  # Remove the columns 're' and 'OtherSkip' from the dataframe
mutate(indicatorByResID = ifelse(indicatorByResIDValue == "-1", 1, 0)) %>%  # Create a new column 'indicatorByResID' with values 1 if 'indicatorByResIDValue' is "-1", otherwise 0
mutate(round = as.integer(gsub("is(\\d+).*", "\\1", variable))) %>%  # Extract the numeric part from the 'variable' column and assign it to the new column 'round'
mutate(label = sub("is\\d+", "", variable)) %>%  # Remove the 'hc' prefix and the numeric part from the 'variable' column and assign it to the new column 'label'
select(-variable) %>%  # Remove the 'variable' column from the dataframe
filter(round == 1)  # Keep only the rows where 'round' is equal to 1
View(result_df)
save(result_df, file = paste0(base_path, "outcomes/Rdresid.RData"))
# Load required libraries
library(readr)
library(dplyr)
library(openxlsx)
library(readxl)
library(openxlsx)
library(tidyverse)
library(xlsx)
library(openxlsx)
# Set common base path
base_path <- "C:/Users/ccris/Dropbox (University of Michigan)/carlos/Work/Nhats/SkipNHATS/"
# Read data from Excel files
fullList <- read_excel(paste0(base_path, "datasets/SkipDataset/NHATSNationalStudyRound1SpecWriterExchange.xlsx"), sheet = "Item")
trueNames <- read_excel(paste0(base_path, "datasets/SkipDataset/NHATS_R1_Crosswalk_between_Instruments_and_Codebook_0.xlsx"))
Part2 <- read_excel(paste0(base_path, "datasets/SkipDataset/NHATSNationalStudyRound1SpecWriterExchange.xlsx"), sheet = "ItemResponse")
# Load saved data
load(paste0(base_path, "outcomes/Rdresid.RData")) # result_df
load(paste0(base_path, "outcomes/SkipPattern.RData")) # results_df
load(paste0(base_path, "outcomes/results_box.RData"))
# Load custom function
processData <- paste0(base_path, "Functions/processData.R")
source(processData)
# Process data using custom function
patternData <- processData(Part2, fullList, trueNames,section="IS")
# Remove unnecessary columns from result_df
datsRdresid <- result_df %>%
mutate(firstskipPattern = paste0("is1", label)) %>%
select(-label)
# Filter out rows with missing values in pattern and Variable.name columns
patternData2 <- patternData %>%
filter(!is.na(pattern) & !is.na(Variable.name))
# Remove unnecessary columns from result_df
datsRdresid <- result_df %>%
mutate(firstskipPattern = paste0("is1", label)) %>%
select(-label)
# Merge patternData, results_df, and result_df
FinalPresentHC <- patternData %>%
left_join(results_df %>%
rename(Variable.name = variable)) %>%
left_join(result_df %>%
mutate(firstskipPattern = paste0("is1", label)) %>%
select(-label) %>%
rename(Variable.name = firstskipPattern)) %>%
mutate(pattern = str_replace_all(pattern, ",", " or ")) %>%
mutate(skipPrior = gsub(",\\s*-1", "", skipPrior)) %>%
mutate(skippedResid = ifelse(OtherSkip2 == "1, 2", 1, 0),
skippedbyBoth = ifelse(
is.na(skipPrior) |
grepl("-8|-7|=(\\d+)", skipPrior) |
grepl("=(\\d+)", pattern),
0,
1
),
skippedbyBoth = ifelse(is.na(pattern), 2, skippedbyBoth)) %>%
mutate(Indicator2 = case_when(
skippedResid == 1 & skippedbyBoth == 0 ~ 0,
skippedResid == 1 & skippedbyBoth == 1 ~ 1,
skippedResid == 1 & skippedbyBoth == 2 ~ 1,
skippedResid == 0 & skippedbyBoth == 1 ~ 1,
skippedResid == 0 & skippedbyBoth == 2 ~ 0,
skippedResid == 0 & skippedbyBoth == 0 ~ 0
)) %>%
select(c("fldSectionID", "Questionnaire.ITEM", "Variable.name", "fldResponseID", "pattern", "OtherSkip2",
"indicatorByResIDValue", "skipPrior", "indicatorByResID", "minus1Target",
"skippedResid", "skippedbyBoth", "Indicator2")) %>%
mutate(pattern = str_replace(pattern, "=\\d+$", ""),
pattern = ifelse(!is.na(skipPrior), paste0(pattern, "=", skipPrior), NA),
textResID = ifelse(!is.na(indicatorByResID), "resid=4", NA),
text = case_when(
is.na(textResID) & is.na(pattern) ~ NA,
is.na(textResID) & !is.na(pattern) ~ pattern,
!is.na(textResID) & is.na(pattern) ~ textResID,
!is.na(textResID) & !is.na(pattern) ~ paste0(textResID, " or ", pattern)),
text = ifelse(is.na(text), "FileNotinSP", text)) %>%
select(-c(textResID, pattern)) %>%
ungroup() %>%
group_by(Questionnaire.ITEM) %>%
distinct() %>%
mutate(fldResponsesID = paste(fldResponseID, collapse = ",")) %>%
ungroup() %>%
select(-fldResponseID) %>%
distinct() %>%
select("fldSectionID", "Questionnaire.ITEM", "Variable.name", "fldResponsesID", "OtherSkip2", "indicatorByResIDValue", "skipPrior", "text") %>%
mutate(skipbyuniplicable = case_when(
is.na(OtherSkip2) ~ NA,
OtherSkip2 == " " ~ 0,
!is.na(OtherSkip2) ~ 1
),
skipbyResIDValue = case_when(
indicatorByResIDValue == "-1" ~ 1,
is.na(indicatorByResIDValue) ~ NA,
indicatorByResIDValue != "-1" ~ 0
),
skipbyResIDPattern = case_when(
is.na(skipbyuniplicable) & is.na(skipPrior) ~ NA,
skipbyuniplicable == 0 & !is.na(skipPrior) ~ 0,
skipbyuniplicable == 0 & is.na(skipPrior) ~ 0,
skipbyuniplicable == 1 & !is.na(skipPrior) ~ 0,
skipbyuniplicable == 1 & is.na(skipPrior) ~ 1
)) %>%
select(-c("OtherSkip2", "indicatorByResIDValue", "skipPrior")) %>%
select("fldSectionID", "Questionnaire.ITEM", "Variable.name", "fldResponsesID",
"skipbyResIDValue","skipbyuniplicable", "skipbyResIDPattern", "text") %>%
rename(AdditionalSkipByResID = "skipbyuniplicable",
skipbyResID = "skipbyResIDValue",
skipbyResIDPattern = "skipbyResIDPattern") %>%
left_join(results_box %>%
select(Questionnaire.ITEM ,simpleBoxSkip,textBox )) %>%
mutate(text = ifelse(is.na(textBox),text,paste0(text," or ",textBox)) ,
simpleBoxSkip =ifelse(is.na(simpleBoxSkip),skipbyResIDPattern,0)) %>%
select("fldSectionID","Questionnaire.ITEM","Variable.name","fldResponsesID","skipbyResID","AdditionalSkipByResID","skipbyResIDPattern","simpleBoxSkip","text")
View(FinalPresentHC)
# Create a new workbook
wb <- createWorkbook()
ItemPF = FinalPresentHC %>%
filter(skipbyResID==1) %>%
summarise(n()) %>%
as.numeric()
Itembyr1dresid = FinalPresentHC %>%
filter(skipbyResID ==1 & AdditionalSkipByResID ==0)%>%
summarise(n()) %>%
as.numeric()
Itembyr1dresidandPrior = FinalPresentHC %>%
filter(AdditionalSkipByResID ==1 & skipbyResIDPattern ==0)%>%
summarise(n()) %>%
as.numeric()
ItemRemain = FinalPresentHC %>%
filter(AdditionalSkipByResID ==1 & skipbyResIDPattern ==1 &
skipbyResIDPattern ==1) %>%
summarise(n()) %>%
as.numeric()
# Create a new workbook
wb <- createWorkbook()
writeData(wb, sheet = "ISsection", x = FinalPresentHC)
# Add the second worksheet and write the message to it
addWorksheet(wb, "SummaryIS")
writeData(wb, sheet = "SummaryIS",
x = c(paste("Total number of variables available in public file in HC section:", ItemPF),
paste("skipped only by r1dresid:", Itembyr1dresid),
paste("skipped by r1dresid and prior variables:", Itembyr1dresidandPrior),
paste("Remaining box:", ItemRemain),
"Remaining others: 0"))
# Save the workbook
saveWorkbook(wb, paste0(base_path, "outcomes/IS.xlsx"), overwrite = TRUE)
FinalPresentHC
# Create a new workbook
wb <- createWorkbook()
wb
# Add the first worksheet and write the data frame to it
addWorksheet(wb, "ISsection")
writeData(wb, sheet = "ISsection", x = FinalPresentHC)
# Add the second worksheet and write the message to it
addWorksheet(wb, "SummaryIS")
writeData(wb, sheet = "SummaryIS",
x = c(paste("Total number of variables available in public file in HC section:", ItemPF),
paste("skipped only by r1dresid:", Itembyr1dresid),
paste("skipped by r1dresid and prior variables:", Itembyr1dresidandPrior),
paste("Remaining box:", ItemRemain),
"Remaining others: 0"))
wb
# Save the workbook
saveWorkbook(wb, paste0(base_path, "outcomes/IS.xlsx"), overwrite = TRUE)
# Merge patternData, results_df, and result_df
FinalPresentHC <- patternData %>%
left_join(results_df %>%
rename(Variable.name = variable)) %>%
left_join(result_df %>%
mutate(firstskipPattern = paste0("is1", label)) %>%
select(-label) %>%
rename(Variable.name = firstskipPattern)) %>%
mutate(pattern = str_replace_all(pattern, ",", " or ")) %>%
mutate(skipPrior = gsub(",\\s*-1", "", skipPrior)) %>%
mutate(skippedResid = ifelse(OtherSkip2 == "1, 2", 1, 0),
skippedbyBoth = ifelse(
is.na(skipPrior) |
grepl("-8|-7|=(\\d+)", skipPrior) |
grepl("=(\\d+)", pattern),
0,
1
),
skippedbyBoth = ifelse(is.na(pattern), 2, skippedbyBoth)) %>%
mutate(Indicator2 = case_when(
skippedResid == 1 & skippedbyBoth == 0 ~ 0,
skippedResid == 1 & skippedbyBoth == 1 ~ 1,
skippedResid == 1 & skippedbyBoth == 2 ~ 1,
skippedResid == 0 & skippedbyBoth == 1 ~ 1,
skippedResid == 0 & skippedbyBoth == 2 ~ 0,
skippedResid == 0 & skippedbyBoth == 0 ~ 0
)) %>%
select(c("fldSectionID", "Questionnaire.ITEM", "Variable.name", "fldResponseID", "pattern", "OtherSkip2",
"indicatorByResIDValue", "skipPrior", "indicatorByResID", "minus1Target",
"skippedResid", "skippedbyBoth", "Indicator2")) %>%
mutate(pattern = str_replace(pattern, "=\\d+$", ""),
pattern = ifelse(!is.na(skipPrior), paste0(pattern, "=", skipPrior), NA),
textResID = ifelse(!is.na(indicatorByResID), "resid=4", NA),
text = case_when(
is.na(textResID) & is.na(pattern) ~ NA,
is.na(textResID) & !is.na(pattern) ~ pattern,
!is.na(textResID) & is.na(pattern) ~ textResID,
!is.na(textResID) & !is.na(pattern) ~ paste0(textResID, " or ", pattern)),
text = ifelse(is.na(text), "FileNotinSP", text)) %>%
select(-c(textResID, pattern)) %>%
ungroup() %>%
group_by(Questionnaire.ITEM) %>%
distinct() %>%
mutate(fldResponsesID = paste(fldResponseID, collapse = ",")) %>%
ungroup() %>%
select(-fldResponseID) %>%
distinct() %>%
select("fldSectionID", "Questionnaire.ITEM", "Variable.name", "fldResponsesID", "OtherSkip2", "indicatorByResIDValue", "skipPrior", "text") %>%
mutate(skipbyuniplicable = case_when(
is.na(OtherSkip2) ~ NA,
OtherSkip2 == " " ~ 0,
!is.na(OtherSkip2) ~ 1
),
skipbyResIDValue = case_when(
indicatorByResIDValue == "-1" ~ 1,
is.na(indicatorByResIDValue) ~ NA,
indicatorByResIDValue != "-1" ~ 0
),
skipbyResIDPattern = case_when(
is.na(skipbyuniplicable) & is.na(skipPrior) ~ NA,
skipbyuniplicable == 0 & !is.na(skipPrior) ~ 0,
skipbyuniplicable == 0 & is.na(skipPrior) ~ 0,
skipbyuniplicable == 1 & !is.na(skipPrior) ~ 0,
skipbyuniplicable == 1 & is.na(skipPrior) ~ 1
)) %>%
select(-c("OtherSkip2", "indicatorByResIDValue", "skipPrior")) %>%
select("fldSectionID", "Questionnaire.ITEM", "Variable.name", "fldResponsesID",
"skipbyResIDValue","skipbyuniplicable", "skipbyResIDPattern", "text") %>%
rename(AdditionalSkipByResID = "skipbyuniplicable",
skipbyResID = "skipbyResIDValue",
skipbyResIDPattern = "skipbyResIDPattern") %>%
left_join(results_box %>%
select(Questionnaire.ITEM ,simpleBoxSkip,textBox )) %>%
mutate(text = ifelse(is.na(textBox),text,paste0(text," or ",textBox)) ,
simpleBoxSkip =ifelse(is.na(simpleBoxSkip),skipbyResIDPattern,0)) %>%
select("fldSectionID","Questionnaire.ITEM","Variable.name","fldResponsesID","skipbyResID","AdditionalSkipByResID","skipbyResIDPattern","simpleBoxSkip","text") %>%
mutate(AdditionalSkipByResID = ifelse(skipbyResID==0,0,AdditionalSkipByResID))
ItemPF = FinalPresentHC %>%
filter(skipbyResID==1) %>%
summarise(n()) %>%
as.numeric()
Itembyr1dresid = FinalPresentHC %>%
filter(skipbyResID ==1 & AdditionalSkipByResID ==0)%>%
summarise(n()) %>%
as.numeric()
Itembyr1dresidandPrior = FinalPresentHC %>%
filter(AdditionalSkipByResID ==1 & skipbyResIDPattern ==0)%>%
summarise(n()) %>%
as.numeric()
ItemRemain = FinalPresentHC %>%
filter(AdditionalSkipByResID ==1 & skipbyResIDPattern ==1 &
skipbyResIDPattern ==1) %>%
summarise(n()) %>%
as.numeric()
# Create a new workbook
wb <- createWorkbook()
# Add the first worksheet and write the data frame to it
addWorksheet(wb, "ISsection")
writeData(wb, sheet = "ISsection", x = FinalPresentHC)
# Add the second worksheet and write the message to it
addWorksheet(wb, "SummaryIS")
writeData(wb, sheet = "SummaryIS",
x = c(paste("Total number of variables available in public file in HC section:", ItemPF),
paste("skipped only by r1dresid:", Itembyr1dresid),
paste("skipped by r1dresid and prior variables:", Itembyr1dresidandPrior),
paste("Remaining box:", ItemRemain),
"Remaining others: 0"))
# Save the workbook
saveWorkbook(wb, paste0(base_path, "outcomes/IS.xlsx"), overwrite = TRUE)
